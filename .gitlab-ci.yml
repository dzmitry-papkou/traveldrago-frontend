stages:
  - build
  - test
  - package
  - deploy production

variables:
  NODE_IMAGE: node:21-alpine
  DOCKER_IMAGE: docker:26.1.1-dind
  APP_NAME: traveldrago-web
  APP_ENV_NAME: Traveldrago-web-env
  APP_VERSION: ${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_IID}

cache:
  paths:
    - node_modules/

build:
  image: $NODE_IMAGE
  stage: build
  script:
    - npm install
    - npm run lint
    - npm test
    - npm run build
    - echo $APP_VERSION > build/version.html
  artifacts:
    paths:
      - build/
    expire_in: 1 week

test:
  image: $NODE_IMAGE
  stage: test
  script:
    - npm install -g serve
    - serve -s build &
    - sleep 10
  dependencies:
    - build

build docker image:
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_IMAGE
  stage: package
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION

.deploy:
  image:
    name: amazon/aws-cli:2.15.44
    entrypoint: ['']
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION

deploy_production:
  stage: deploy production
  environment:
    name: production
    url: https://www.traveldrago.com
  when: manual
  extends: .deploy
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "\n" | base64)
    - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < templates/auth.json > auth.json
    - cat Dockerrun.aws.json
    - cat auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET_PRODUCTION/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_S3_BUCKET_PRODUCTION/auth.json
    - aws elasticbeanstalk create-application-version --application-name "$APP_NAME" --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET_PRODUCTION,S3Key=Dockerrun.aws.json
    - aws elasticbeanstalk update-environment --application-name "$APP_NAME" --version-label $APP_VERSION --environment-name $APP_ENV_NAME
    - aws elasticbeanstalk wait environment-updated --application-name "$APP_NAME" --version-label $APP_VERSION --environment-name $APP_ENV_NAME
